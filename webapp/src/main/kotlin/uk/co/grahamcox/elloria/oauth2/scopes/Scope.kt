package uk.co.grahamcox.elloria.oauth2.scopes

/**
 * The Namespaced ID of a scope
 * @property namespace the namespace
 * @property scope the scope
 */
data class ScopeId(val namespace: String?,
                   val scope: String) {
    companion object {
        /**
         * Parse an ID String - as generated by {@link ScopeId#toString} into a ScopeId
         * @param id The ID String to parse
         * @return the parsed ScopeId
         */
        fun parse(id: String) = if (id.contains(":")) {
                val separator = id.indexOf(":")
                val namespace = id.substring(0, separator)
                val scope = id.substring(separator + 1)
                ScopeId(namespace, scope)
            } else {
                ScopeId(null, id)
            }
    }

    /**
     * Generate a simple string representation of a Scope ID
     * This is the namespace and scope, separated with a colon character
     */
    override fun toString(): String = listOf(namespace, scope)
        .filterNotNull()
        .joinToString(":")
}

/**
 * Representation of a scope
 * @param id The Namespaced ID of the scope
 * @param description The description of the scope
 */
data class Scope(val id: ScopeId, val description: String)